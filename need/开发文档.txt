项目开发文档：基于大语言模型辅助的数字化牙科矫治器设计软件
1. 项目概述
1.1 项目简介
本文档旨在为“基于大语言模型辅助的数字化牙科矫治器设计软件”项目提供全面的开发指导 。本项目的核心目标是复现并创新一个三维辅助设计工具，该工具能够加载用户的牙齿3D扫描模型（.stl格式），并通过用户交互在此模型上智能地生成保持器的金属丝路径 。


本项目的一个关键要求是在整个开发过程中必须熟练运用大语言模型（LLM，如Gemini）作为编程与学习助手 。此外，软件功能上需要实现创新，即集成一个内置的人工智能（AI）模块，该模块能根据用户定义的少数关键点，自动预测并生成一条符合基本医学要求的初始路径 。

1.2 项目范围

核心功能：加载并显示.stl格式的3D牙齿模型 ；提供流畅的3D视角操作（旋转、缩放、平移） ；通过交互式点选定义路径锚点 ；手动微调已生成的路径 ；参数化调整（如弓丝直径） ；以及导出路径数据为JSON格式 。






创新功能：开发一个AI辅助模块，实现智能路径推荐与优化功能 。


开发过程：强制要求使用LLM辅助算法设计、代码生成、问题求解、Bug修复和文档撰写等任务 。

2. 系统架构与设计
为实现快速开发和平台兼容性，建议采用基于Web和Three.js（一个主流的JavaScript 3D图形库）的技术栈，这与演示软件的实现方式一致。

2.1 系统架构
推荐采用经典的**模型-视图-控制器（MVC）**架构模式来组织代码：

模型（Model）：负责管理应用程序的所有数据和状态。这包括加载的3D牙模网格、定义弓丝路径的点坐标数组、用户设置的参数（如金属丝直径、U型曲高度等）以及用于实现撤销功能的操作历史栈。

视图（View）：负责用户界面的渲染。主要分为两部分：由Three.js驱动的3D渲染画布（用于展示牙模和弓丝）和由HTML/CSS构建的2D控制面板（包含所有按钮、滑块和输入框）。

控制器（Controller）：负责处理所有用户输入和交互逻辑。它监听来自3D画布的鼠标事件（如点击添加点、拖拽视图）和来自2D控制面板的UI事件（如点击“生成U型曲”按钮），随后更新模型数据，并通知视图进行重新渲染。

2.2 关键技术栈
3D图形引擎：Three.js

编程语言：JavaScript (ES6+)

用户界面：HTML5, CSS (可采用Tailwind CSS等框架加速开发)

开发辅助工具：Gemini 或其他大语言模型

2.3 核心数据结构
牙齿模型：一个由STLLoader加载后生成的THREE.Mesh对象。

弓丝路径：一个有序的THREE.Vector3对象数组，每个对象代表路径上的一个锚点。部分锚点可通过其userData属性携带额外信息（例如，标记其是否为U型曲的内部点）。


导出格式：一个标准的JSON对象，其中包含一个名为points的键，其值为一个由{x, y, z}坐标对象组成的数组 。

3. 核心模块与功能实现
3.1 模块一：文件IO与3D场景初始化
功能描述：

支持从本地加载

.stl格式的3D牙齿模型 。

提供流畅的3D视角控制，包括旋转、缩放、平移 。

支持导入/导出

.json格式的路径设计文件 。

允许调节牙模的透明度，以便更清晰地观察弓丝路径。

实现要点：

使用HTML的<input type="file">标签来接收用户上传的文件。

调用Three.js的STLLoader来解析STL文件数据并生成THREE.BufferGeometry。

实例化OrbitControls插件来实现直观的镜头操控。

编写exportJSON和importJSON函数，利用浏览器的FileReaderAPI和JSON.stringify/parse方法处理数据的导入和导出。

3.2 模块二：参考平面定义
功能描述：这是设计流程中的关键前置步骤。用户通过在牙模表面点选三个点来定义一个参考平面。该平面对于后续U型曲等特征的准确定位至关重要。

实现要点：

使用THREE.Raycaster（光线投射）来精确获取鼠标点击位置与3D牙模表面的交点。

用小球体（THREE.Mesh）来可视化这三个控制点。

为控制点启用THREE.DragControls，允许用户在放置后进行拖拽微调。

当三个点都存在时，通过向量叉乘运算计算出平面的法向量，并将其存储起来以备后用。

使用一个半透明的THREE.PlaneGeometry网格来可视化已定义的平面。

3.3 模块三：弓丝路径的交互式设计与编辑
功能描述：


绘制模式：用户通过在牙模表面单击来添加路径锚点 。系统根据锚点自动生成连接的弓丝。


编辑模式：用户可以拖动已存在的锚点，实时地调整路径形态 。


参数化：用户可以在设置面板中调整弓丝的直径等参数 。

实现要点：

添加点：同样使用THREE.Raycaster获取交点坐标和所在面的法向量。为了防止弓丝穿透模型，实际锚点的位置应沿法向量方向向外偏移一个弓丝半径的距离。

路径渲染：

对于平滑曲线，使用THREE.CatmullRomCurve3根据锚点数组生成一条平滑的曲线。

使用THREE.TubeGeometry根据生成的曲线和用户设定的弓丝半径来创建最终的3D管状网格。

编辑点：为代表锚点的可视化小球体启用THREE.DragControls。在拖拽过程中，实时更新锚点数组中对应的Vector3坐标，并重新计算和渲染整个弓丝。

3.4 模块四：U型曲的生成
功能描述：此模块需严格遵循《唇弓矫正器设计说明》中的专业规范，在用户选择的两个锚点之间生成一个标准的U型曲。

设计规范：

U型曲的起始点位于尖牙中1/2处 。

弯折位置在龈缘下2-3mm处 。

曲的宽度约为尖牙宽度的1/2 。

曲的末端需离开组织面0.5-1mm 。

实现要点：

选择：实现一个选择机制（例如，按住Shift键单击）来让用户选中两个锚点。

几何计算：

获取起始点P_start和结束点P_end。

计算U型曲的朝向。关键在于定义一个“向外”的向量y_hat。该向量可通过P_start到P_end的向量x_hat与“参考平面”的法向量进行叉乘得到，从而确保U型曲能正确地从牙弓平面中伸出。

根据用户设定的U型曲高度和宽度参数，计算出构成U型曲所需的一系列点的坐标（包括两个垂直臂的顶点和顶部半圆上的多个点）。

将这些新生成的点插入到主路径的点数组中，替换掉原P_start和P_end之间的所有点。

重新渲染场景。

3.5 模块五：AI辅助路径生成（创新模块）

功能描述：作为项目的核心创新点，此模块旨在减少用户的操作负担 。用户仅需在牙弓上放置少数几个关键点（例如，在两侧尖牙和门牙位置），AI模块便能自动预测并生成一条完整的、平滑的初始唇弓路径 。


实现策略：

输入：用户在绘制模式下放置3-5个关键锚点。

预测算法：可采用一种基于几何规则的启发式算法。

首先，将用户给出的3D锚点投影到之前定义的2D“参考平面”上。

在2D平面上，使用样条曲线（如Catmull-Rom样条）拟合这些投影点，生成一条平滑的2D基准曲线。

沿着这条2D基准曲线进行密集采样，获得更多的2D点。

将这些采样点逐一从2D平面垂直“投射”回3D牙模表面（即，沿参考平面法向量方向发射射线，寻找与牙模的交点）。

最后，对所有返回的3D点应用法向偏移，生成最终的完整路径。

LLM的角色：在此模块的开发中，团队应积极使用LLM。例如：

算法研究：提问“如何用JavaScript实现通过一组三维点拟合Catmull-Rom样条曲线？”

代码生成：要求“请用Three.js编写一个函数，输入一个点、一个方向向量和一个Mesh对象，返回射线与Mesh的交点坐标。”

逻辑优化：探讨“如何优化路径生成算法，使其能更好地贴合不规则的牙弓形态？”

3.6 模块六：状态管理与撤销功能
功能描述：提供一个可靠的撤销（Undo）功能，以支持用户的探索性设计。所有改变路径的操作（如加点、移动点、生成U型曲）都应能被撤销。

实现要点：

维护一个historyStack（历史记录栈）数组。

在每次对路径点数组执行修改操作之前，将当前点数组的深拷贝副本推入historyStack。

当用户触发“撤销”操作（通过按钮或Ctrl+Z快捷键）时，从栈顶弹出一个状态，用它覆盖当前的点数组，并刷新场景。

4. 开发计划与时间安排
此计划参考任务书中的建议进度 。


第一周 (9.08 - 9.11): 需求分析与设计 

任务：完成本文档的最终定稿，设计核心数据结构和UI布局。

目标：完成模块一（文件IO与场景），实现STL模型加载和基本镜头控制。


第二周 (9.12 - 9.15): 核心功能编码 

任务：实现核心的路径设计与编辑功能。

目标：完成模块二（参考平面）和模块三（路径交互设计）。此时应能实现完整的“加点-成线-编辑”流程。


中期检查 (9.14)：需提交一个可演示的版本，具备上述核心功能 。


第三周 (9.16 - 9.19): 高级功能与测试 

任务：实现复杂的几何功能和AI模块。

目标：完成模块四（U型曲）、**模块六（撤销）以及模块五（AI辅助生成）**的初步实现。